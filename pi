
√úf}W≈ì  √£               @   s2  d  Z  d d l Z d d l m Z m Z d d l m Z m Z m  Z  e j d d ‚Ä¶ d k rl d d l	 Z	 n+ y d d l
 Z	 Wn e
 k
 r‚Äì d Z	 Yn Xd  Z d Z
 d	 Z d
 Z Gd
 d ‚Äû  d e ∆í Z d d
 d d d d d d ‚Äû Z d d
 d d d ‚Äû Z d d
 d d d ‚Äû Z d d d d ‚Äû Z d d d ‚Äû Z d S)z√∑Implementation of the JSON adaptation objects

This module exists to avoid a circular import problem: pyscopg2.extras depends
on psycopg2.extension, so I can't create the default JSON typecasters in
extensions importing register_json from extras.
√©    N)√ö	ISQLQuote√öQuotedString)√önew_type√önew_array_type√ö
register_type√©   √©   √©r   √©√á   i√ö  i√ü  c               @   ss   e  Z d  Z d Z d d d ‚Äû Z d d ‚Äû  Z d  d ‚Äû  Z d	 d
 ‚Äû  Z  e j	 d k  rc d d
 ‚Äû  Z
 n d d
 ‚Äû  Z
 d S)√öJsona¬°  
    An `~psycopg2.extensions.ISQLQuote` wrapper to adapt a Python object to
    :sql:`json` data type.

    `!Json` can be used to wrap any object supported by the provided *dumps*
    function.  If none is provided, the standard :py:func:`json.dumps()` is
    used (`!simplejson` for Python < 2.6;
    `~psycopg2.extensions.ISQLQuote.getquoted()` will raise `!ImportError` if
    the module is not available).

    Nc             C   sI   | |  _  | d  k	 r! | |  _ n$ t d  k	 r< t j |  _ n	 d  |  _ d  S)N)√ö adapted√ö_dumps√öjson√ödumps)√öselfr   r   ¬© r   √∫WD:\Program Files (x86)\Forcepoint\SAM\server\python\lib\site-packages\psycopg2\_json.py√ö__init__B   s    	z
Json.__init__c             C   s   | t  k r |  Sd  S)N)r   )r   √öprotor   r   r   √ö
__conform__L   s    zJson.__conform__c             C   s/   |  j  } | d k	 r | | ∆í St d ∆í ‚Äö d S)z√üSerialize *obj* in JSON format.

        The default is to call `!json.dumps()` or the *dumps* function
        provided in the constructor. You can override this method to create a
        customized JSON wrapper.
        Nz>json module not available: you should provide a dumps function)r
   √ö
ImportError)r   √öobjr   r   r   r   r   P   s
     	
z
Json.dumpsc             C   s"   |  j  |  j ∆í } t | ∆í j ∆í  S)N)r   r   r   √ö	getquoted)r   √ösr   r   r   r   _   s    zJson.getquoted√©   c             C   s
   |  j  ∆í  S)N)r   )r   r   r   r   √ö __str__d   s    zJson.__str__c             C   s   |  j  ∆í  j d d ∆í S)N√öascii√ö replace)r   √ödecode)r   r   r   r   r   g   s    )r   )
√ö__name__√ö
__module__√ö__qualname__√ö __doc__r   r   r   r   √ösys√översion_infor   r   r   r   r   r
   6   s   

r
   Fr   c              C   s‚Äô   | d k r! t  |  | ∆í \ } } t | | d | d | j ∆í  ∆í\ } }  t | | r[ |  p^ d ∆í |  d k	 rÀÜ t |  | r¬Å |  p‚Äû d ∆í | |  f S)a  Create and register typecasters converting :sql:`json` type to Python objects.

    :param conn_or_curs: a connection or cursor used to find the :sql:`json`
        and :sql:`json[]` oids; the typecasters are registered in a scope
        limited to this object, unless *globally* is set to `!True`. It can be
        `!None` if the oids are provided
    :param globally: if `!False` register the typecasters only on
        *conn_or_curs*, otherwise register them globally
    :param loads: the function used to parse the data into a Python object. If
        `!None` use `!json.loads()`, where `!json` is the module chosen
        according to the Python version (see above)
    :param oid: the OID of the :sql:`json` type if known; If not, it will be
        queried on *conn_or_curs*
    :param array_oid: the OID of the :sql:`json[]` array type if known;
        if not, it will be queried on *conn_or_curs*
    :param name: the name of the data type to look for in *conn_or_curs*

    The connection or cursor passed to the function will be used to query the
    database and look for the OID of the :sql:`json` type (or an alternative
    type if *name* if provided). No query is performed if *oid* and *array_oid*
    are provided.  Raise `~psycopg2.ProgrammingError` if the type is not found.

    N√öloads√öname)√ö_get_json_oids√ö_create_json_typecasters√öupperr   )√öconn_or_curs√ögloballyr%   √öoid√ö	array_oidr&   √öJSON√ö	JSONARRAYr   r   r   √ö
register_jsonl   s    $r0   c          
   C   s%   t  d |  d | d | d t d t ∆í S)a{  
    Create and register :sql:`json` typecasters for PostgreSQL 9.2 and following.

    Since PostgreSQL 9.2 :sql:`json` is a builtin type, hence its oid is known
    and fixed. This function allows specifying a customized *loads* function
    for the default :sql:`json` type without querying the database.
    All the parameters have the same meaning of `register_json()`.
    r*   r+   r%   r,   r-   )r0   √öJSON_OID√ö
JSONARRAY_OID)r*   r+   r%   r   r   r   √öregister_default_json‚Äô   s    	r3   c          
   C   s+   t  d |  d | d | d t d t d d  ∆í S)a^  
    Create and register :sql:`jsonb` typecasters for PostgreSQL 9.4 and following.

    As in `register_default_json()`, the function allows to register a
    customized *loads* function for the :sql:`jsonb` type at its known oid for
    PostgreSQL 9.4 and following versions.  All the parameters have the same
    meaning of `register_json()`.
    r*   r+   r%   r,   r-   r&   Zjsonb)r0   √ö	JSONB_OID√öJSONBARRAY_OID)r*   r+   r%   r   r   r   √öregister_default_jsonb≈æ   s    	r6   r.   c                 s¬è   ÀÜ  d k r0 t  d k r' t d ∆í ‚Äö n	 t  j ‚Ä∞  ‚Ä°  f d d ‚Ä†  } t |  f | | ∆í } | d k	 r t | f d | | ∆í } n d } | | f S)z&Create typecasters for json data type.Nzno json module availablec                s   |  d  k r d  SÀÜ  |  ∆í S)Nr   )r   √öcur)r%   r   r   √ö
typecast_json¬≤   s    z/_create_json_typecasters.<locals>.typecast_jsonz %sARRAY)r   r   r%   r   r   ) r,   r-   r%   r&   r8   r.   r/   r   )r%   r   r(   ¬™   s    	r(   c       	      C   s¬∂   d d l  m } d d l m } | |  ∆í \ } } | j } | j d k rP d pS d }  | j d  |  | f ∆í | j  ∆í  } | | k r‚Ñ¢ | j r‚Ñ¢ | j	 ∆í  | s¬≤ | j
 d | ∆í ‚Äö | S)	Nr   )√öSTATUS_IN_TRANSACTION)√ö_solve_conn_cursi¬¨9 √ötyparray√öNULLz6SELECT t.oid, %s FROM pg_type t WHERE t.typname = %%s;z%s data type not found)
√öpsycopg2.extensionsr9   Zpsycopg2.extrasr:   √östatus√öserver_version√ö execute√öfetchone√ö
autocommit√örollback√öProgrammingError)	r*   r&   r9   r:   √öconnZcursZ
conn_statusr;   √örr   r   r   r'   ¬ø   s    	
r'   )r    r   )r"   r#   √öpsycopg2._psycopgr   r   r   r   r   r$   r   Z
simplejsonr   r1   r2   r4   r5   √öobjectr
   r0   r3   r6   r(   r'   r   r   r   r   √ö<module>   s(   

6	%
